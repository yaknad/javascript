stopped at:
https://docs.npmjs.com/how-npm-works/npm3

REFERENCES:
***********
https://www.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/
https://www.toptal.com/javascript/a-guide-to-npm-the-node-package-manager
https://egghead.io/lessons/tools-run-npm-scripts-when-files-change-with-onchange - 1:36 (?)
https://www.sitepoint.com/beginners-guide-node-package-manager/
https://docs.npmjs.com/getting-started/fixing-npm-permissions

Global vs. Local install of packages
*************************************
If you want to use it as a command line tool, something like the grunt CLI, 
then you want to install it globally. 
On the other hand, if you want to depend on the package from your own module using 
something like Node's require command, then you want to install locally.

Commands:
*********
npm install [-g] <package> --save (saves to the package.json [-g] for global install)
npm install <package> -D (saves to the Dev Dependencies in package.json)
npm i <package> = npm install <package> 
npm i <package> -D = npm install <package> and save it in package.json as dev dependency.
npm update [-g] (updates all installed packages, according to package.json)
npm outdated (tests if the installed packages are updated)
npm outdated -g --depth=0 (depth required to avoid recursive update of inner node_modules?)
npm uninstall [-g] <package>
npm uninstall --save <package> 
npm uninstall --save-dev <package>

npm init (create a package.json)
npm init --force / npm init --yes / npm init --y (creates package.json with default answers)
npm set init.author.email "wombat@npmjs.com" (example of setting a default value for npm init future uses)
to create a custom default package.json for npm init command, change the ~/.npm-init.js script -
{or: C:\Users\yaknad\AppData\Roaming\npm\node_modules\npm\node_modules\init-package-json\default-input.js}
(in npm's home directory - get it by running: npm config get prefix) 
to change the npm init questions, change the propmt function in  ~/.npm-init.js script.
npm init --scope=username // to create a scoped package. It's a private package by default, unless using npm publish --access=public.
to set a permanent scope, change the .npmrc file - "npm config set scope whatever"

npm config list (shows some node's defaults)
npm config ls -l (shows all node's defaults)
npm publish --access=public //set the access option to "public" in the first time. It will be the default on subsequent publishes. A non-paid user may only publish public packages! 

npm run (runs all the scripts in the package.json)
npm test (or "npm t" - run test script)
npm start (runs the start script)
npm run env (shows all npm's env variables)
npm run script X or: npm run X (run a custom script - X - like "eslint" below)

npm config get prefix (get the home folder of npm - to which it installs globaly)
sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}  (changes owner of npm's home folders)
see also: https://docs.npmjs.com/getting-started/fixing-npm-permissions

tree - shows file tree schema
npm ls [--depth=0] - shows the list of dependencies. depth=0 means showing only the prime generation of dependencies.

useful dependencies:
********************
html build: pug-cli
css build: npm i node-sass postcss-cli cssmin -D
js build: npm i mustache uglify-js -D
npm i onchange -D (for scripts that doesn't suport the -watch flag)

Semantic versioning (semver):
*****************************
As a publisher:
start at 1.0.0
Bug fixes and other minor changes: Patch release, increment the last number, e.g. 1.0.1
New features which don't break existing features: Minor release, increment the middle number, e.g. 1.1.0
Changes which break backwards compatibility: Major release, increment the first number, e.g. 2.0.0

when updating a package, we use "npm version X" (to update the version in packge.json and add a tag to git repository) 
and then "npm publish" to update the package in npm repository. In order to icrement automatically we can use "npm version patch", 
"npm version minor" or "npm version major" and then "npm publish". 

As a client:
get patch releases: 1.0 or 1.0.x or ~1.0.4,
Minor releases: 1 or 1.x or ^1.0.4,
Major releases: * or x
to get a version, use the above in package.json or as "npm install lodash@1.0.x"

see more in:
https://docs.npmjs.com/misc/semver


useful scripts:
***************
"scripts":{
	"test": "mocha /spec --require babel-register",
	"test": run multiple scripts in series (if one fails, all stop): "npm run eslint && npm run stylelint && mocha..." or "npm-run-all eslint stylelint mocha" (need to install the npm-run-all package first)
	"test": run multiple scripts in parallel): "npm run eslint & npm run stylelint & mocha..." - we could use "npm run eslint & npm run stylelint & mocha /spec --require babel-register --watch" to order mocha to watch for changes, but then it will keep watching after the script has finished (any change to a file will run mocha again). To prevent that, we can use "... & mocha /spec --require babel-register --watch & wait" to wait before the process exits, and then - ctrl + c will stop the process including Mocha's "watch".
	or: "npm-run-all --parallel eslint stylelint mocha" (no need for & wait, because npm-run-all terminates the process in the end.)

	"pretest": "" (runs before test script when using npm run test),
	"posttest": "" (runs after test script when using npm run test)
	"start": "node index.js",
	//custom
	"stylelint": "stylelint '**/*.scss' --syntax scss"
	"eslint": "eslint --cache --fix"  // for global eslint. for local eslint:
	"eslint": "./node_modules/.bin/eslint --cache --fix" or: "$(npm bin)/eslint ...." or: 
		  since in npm's Path environment variable (npm run env | grep 'PATH') we can find all the local node_modules/.bin than we can use the "global" version (eslint --cache etc.) to run the local version!

	"testing:js": "bla....",
	"testing:css": "blabla...",
	"run-all-testing": "npm-run-all testing:*" (needs installation of npm-run-all package),
	"testing:fix:css": "blablabla....",
	"run-all-testing2": "npm-run-all testing:**" (runs also colon sub-sub scripts),

	"watch:test": "mocha spec/ --require babel-register --watch" (same as "test" script - but with a watch. see another version:)
	"watch:test": "npm test -- --watch" (in this version no need to copy the "test" script into "watch:test" script. the first -- tells npm you want to pass additional parameters to the test script)

	"build:html": "pug --obj data.json src/index.pug --out public/"  (uses the pug-cli dependency to build. data.obj is the input and index.pug is the template. public/ is the output directory.)
	"build:css": "node-sass src/index.scss | postcss -c .postcssrc.json | cssmin > public/index.min.css" (use sass result as input to postcss (pipe). [postcss adds vendor prefixes.] use postcss as input to cssmin. output (>) cssmin result to a file - index.min.css)
	"build:js": "mustachew data.json src/index.mustache.js | uglifyjs > public/index.min.js",
	"build":"npm-run-all build:*",
	"pre-build":"rm -rf public/" (remove last build results before re-build)

	"watch:lint":"npm run lint -- --watch" -> doesn't work since lint doesn't support the watch flag. instead we can use:
	"watch:lint":"onchange '**/*.js' '**/*.scss' -- npm run lint" (onchange ignores the node modules folder)
	"watch": "npm-run-all --parallel watch:*"

}: 


